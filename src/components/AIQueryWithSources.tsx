"use client"

import * as React from "react"
import { useState } from "react"
import { Send } from "lucide-react"
import { Button } from "@/components/ui/button"
import { Textarea } from "@/components/ui/textarea"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Skeleton } from "@/components/ui/skeleton"

/**
 * AIQueryWithSources Component
 * 
 * A component that processes user messages, generates responses using Gemini AI,
 * and automatically attaches relevant sources from Tavily AI.
 */
export function AIQueryWithSources() {
  const [query, setQuery] = useState("")
  const [response, setResponse] = useState("")
  const [sources, setSources] = useState([])
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState("")

  // Process the user's query
  const handleSubmit = async (e) => {
    e.preventDefault()
    
    if (!query.trim()) return
    
    setIsLoading(true)
    setError("")
    setResponse("")
    setSources([])
    
    try {
      const res = await fetch("/api/ai/process", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ message: query }),
      })
      
      if (!res.ok) {
        const errorData = await res.json()
        throw new Error(errorData.message || "Failed to process query")
      }
      
      const data = await res.json()
      
      if (data.status === "success") {
        setResponse(data.data.response)
        setSources(data.data.sources)
      } else {
        throw new Error(data.message || "Failed to process query")
      }
    } catch (err) {
      console.error("Error processing query:", err)
      setError(err.message)
    } finally {
      setIsLoading(false)
    }
  }

  return (
    <div className="w-full max-w-4xl mx-auto">
      <Card className="w-full">
        <CardHeader>
          <CardTitle>AI Research Assistant</CardTitle>
          <CardDescription>
            Ask a question and get an answer with reliable sources
          </CardDescription>
        </CardHeader>
        <CardContent>
          <form onSubmit={handleSubmit} className="space-y-4">
            <Textarea
              placeholder="Type your question here..."
              value={query}
              onChange={(e) => setQuery(e.target.value)}
              className="min-h-[100px]"
              dir="auto"
            />
            <Button 
              type="submit" 
              className="w-full" 
              disabled={isLoading || !query.trim()}
            >
              {isLoading ? "Processing..." : "Send Question"}
              {!isLoading && <Send className="ml-2 h-4 w-4" />}
            </Button>
          </form>
          
          {error && (
            <div className="mt-4 p-4 bg-red-500/10 border border-red-500 rounded-md">
              <p className="text-red-500">{error}</p>
            </div>
          )}
          
          {isLoading && (
            <div className="mt-6 space-y-4">
              <Skeleton className="h-4 w-full" />
              <Skeleton className="h-4 w-full" />
              <Skeleton className="h-4 w-3/4" />
              <Skeleton className="h-4 w-full" />
              <Skeleton className="h-4 w-5/6" />
            </div>
          )}
          
          {response && (
            <div className="mt-6">
              <h3 className="text-lg font-medium mb-2">Response:</h3>
              <div className="p-4 bg-muted rounded-md whitespace-pre-wrap" dir="auto">
                {response}
              </div>
            </div>
          )}
          
          {sources && sources.length > 0 && (
            <div className="mt-6">
              <h3 className="text-lg font-medium mb-2">Sources:</h3>
              <div className="space-y-3">
                {sources.map((source, index) => (
                  <div key={index} className="p-3 bg-muted rounded-md">
                    <h4 className="font-medium">
                      <a 
                        href={source.url} 
                        target="_blank" 
                        rel="noopener noreferrer"
                        className="text-blue-500 hover:underline"
                      >
                        {source.title || `Source ${index + 1}`}
                      </a>
                    </h4>
                    <p className="text-sm text-muted-foreground truncate">{source.url}</p>
                    <p className="mt-1 text-sm">{source.content.substring(0, 150)}...</p>
                  </div>
                ))}
              </div>
            </div>
          )}
        </CardContent>
        <CardFooter className="text-sm text-muted-foreground">
          Responses generated by Gemini AI with sources from Tavily AI
        </CardFooter>
      </Card>
    </div>
  )
}